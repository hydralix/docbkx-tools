package com.agilejava.maven.docbkx;

/*
 * Copyright 2006 Wilfred Springer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.File;
import java.io.IOException;

import org.codehaus.plexus.archiver.ArchiverException;
import org.codehaus.plexus.archiver.UnArchiver;
import org.codehaus.plexus.util.FileUtils;

/**
 * A class allowing us to access the extracted content for a certain file.
 * 
 * @author Wilfred Springer
 */
public class ZipFile {

    /**
     * The original zip file.
     */
    private File zipFile;

    /**
     * A boolean indicating if the file has already been extracted.
     */
    private boolean extracted;

    /**
     * The directory in which the file is extracted.
     */
    private File targetDirectory;

    /**
     * The un-archiver to use for extracting the contents.
     */
    private UnArchiver unArchiver;

    /**
     * The logger for events geneted by the zip file.
     */
    private EventLogger logger;

    /**
     * Constrcts a new instance.
     * 
     * @param zipFile
     *            The file wrapped by this instance.
     * @param unArchiver
     *            The <code>UnArchiver</code> used for extracting the contents
     *            of this file.
     */
    public ZipFile(File zipFile, UnArchiver unArchiver, EventLogger logger) {
        this.zipFile = zipFile;
        this.extracted = false;
        this.unArchiver = unArchiver;
        this.logger = logger;
    }

    /**
     * Returns a <code>File</code> object representing the location to which
     * the zip file has been extracted.
     * 
     * @return A <code>File</code> object representing the location to which
     *         the zip file has been extracted.
     * @throws IOException
     *             If the operation fails to extract the file.
     */
    public synchronized File getExtractedFileRoot() {
        if (!extracted) {
            targetDirectory = FileUtils
                    .createTempFile("extracted", "jar", null);
            targetDirectory.deleteOnExit();
            FileUtils.mkdir(targetDirectory.getAbsolutePath());
            unArchiver.setDestDirectory(targetDirectory);
            unArchiver.setSourceFile(zipFile);
            try {
                unArchiver.extract();
            } catch (IOException ioe) {
                logger.logZipFileReadFailure(zipFile, ioe);
            } catch (ArchiverException ae) {
                logger.logZipFileExtractionFailure(zipFile, ae);
            }
            extracted = true;
        }
        return targetDirectory;
    }

    /**
     * The interface to be implemented by loggers that want to deal with events
     * generated by the ZipFile class.
     */
    public interface EventLogger {

        /**
         * Failed to read the zip file.
         * 
         * @param file
         *            The file that cannot be read.
         * @param ioe
         *            The exception thrown.
         */
        void logZipFileReadFailure(File file, IOException ioe);

        /**
         * Failed to extract the zip file.
         * 
         * @param file
         *            The file that could not be extracted.
         * @param ae
         *            The exception thrown while extracting the file.
         */
        void logZipFileExtractionFailure(File file, ArchiverException ae);

    }

    /**
     * A Null implementation of the {@link EventLogger} interface.
     */
    public class NullEventLogger implements EventLogger {

        public void logZipFileReadFailure(File file, IOException ioe) {
        }

        public void logZipFileExtractionFailure(File file, ArchiverException ae) {
        }

    }

}